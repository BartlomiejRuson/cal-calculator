import Head from "next/head";
import { useState, useEffect } from "react";
import uuid from "react-uuid";

export default function Home() {
  const [bre, setBre] = useState([]);
  const [lun, setLun] = useState([]);
  const [din, setDin] = useState([]);
  const [sna, setSna] = useState([]);
  const [breakfastTotal, setBreakfastTotal] = useState(0);
  const [lunchTotal, setLunchTotal] = useState(0);
  const [dinnerTotal, setDinnerTotal] = useState(0);
  const [snacksTotal, setSnacksTotal] = useState(0);
  const [ingr, setIngr] = useState("");
  const [dish, setDish] = useState("");
  const [currentFood, setCurrentFood] = useState({
    name: "",
    dish: "",
    kcals: "",
  });

  const deleteFood = (id, dish, kcals) => {
    console.log("delete clicked");
    switch (dish) {
      case "breakfast":
        const newBreakfast = bre.filter((item) => {
          return item.id != id;
        });
        setBre(newBreakfast);
        setBreakfastTotal(breakfastTotal - kcals);
        break;
      case "lunch":
        const newLunch = lun.filter((item) => {
          return item.id != id;
        });
        setLun(newLunch);
        setLunchTotal(lunchTotal - kcals);
        break;
      case "dinner":
        const newDinner = din.filter((item) => {
          return item.id != id;
        });
        setDin(newDinner);
        setDinnerTotal(dinnerTotal - kcals);
        break;
      case "snacks":
        const newSnacks = sna.filter((item) => {
          return item.id != id;
        });
        setSna(newSnacks);
        setSnacksTotal(snacksTotal - kcals);
        break;
      default:
    }
  };

  useEffect(() => {
    switch (dish) {
      case "breakfast":
        setBre([
          ...bre,
          { id: uuid(), name: currentFood.name, kcals: currentFood.kcals },
        ]);
        setBreakfastTotal(breakfastTotal + currentFood.kcals);
        break;
      case "lunch":
        setLun([
          ...lun,
          { id: uuid(), name: currentFood.name, kcals: currentFood.kcals },
        ]);
        setLunchTotal(lunchTotal + currentFood.kcals);
        break;
      case "dinner":
        setDin([
          ...din,
          { id: uuid(), name: currentFood.name, kcals: currentFood.kcals },
        ]);
        setDinnerTotal(dinnerTotal + currentFood.kcals);
        break;
      case "snacks":
        setSna([
          ...sna,
          { id: uuid(), name: currentFood.name, kcals: currentFood.kcals },
        ]);
        setSnacksTotal(snacksTotal + currentFood.kcals);
        break;
      default:
    }
  }, [currentFood]);

  const handleSubmit = (e) => {
    e.preventDefault();
    const options = {
      method: "GET",
      headers: {
        "X-RapidAPI-Host": "edamam-food-and-grocery-database.p.rapidapi.com",
        "X-RapidAPI-Key": "ed891157f5mshc9042211f64f080p1bbbf9jsnedd6101045bb",
      },
    };

    fetch(
      "https://edamam-food-and-grocery-database.p.rapidapi.com/parser?ingr=" +
        ingr,
      options
    )
      .then((response) => response.json())
      .then((response) =>
        setCurrentFood({
          name: ingr,
          dish: dish,
          kcals: response.parsed[0].food.nutrients.ENERC_KCAL,
        })
      )
      .catch((err) => console.error(err));
  };
  return (
    <div className="h-screen bg-gray-200">
      <Head>
        <title>Calorie intake counter</title>
        <meta name="description" content="Generated by me" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav className="flex justify-items-center items-center justify-center bg-gray-200 py-1 border-b border-black">
        <span className="px-4 text-xl font-semibold">Calorie</span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-12 w-12"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          strokeWidth={2}
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"
          />
        </svg>
        <span className="px-4 text-xl font-semibold">Calculator</span>
      </nav>
      <main className="flex justify-around text-center bg-gray-100 py-5">
        <div className="w-full">
          <h2 className="text-xl font-semibold">Breakfast</h2>
          <div className="h-72 overflow-y-scroll scrollbar">
            {bre.map((item) => (
              <div
                className="flex gap-2 my-1  py-2 max-h-full justify-center "
                key={item.id}
              >
                <p  className="border-r border-black pr-2">{item.name}</p>
                <p  className="border-r border-black pr-2">{item.kcals} kcals</p>
                <div
                  className="cursor-pointer"
                  onClick={() => {
                    deleteFood(item.id, "breakfast", item.kcals);
                  }}
                >
                  {" "}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-red-600"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
              </div>
            ))}
          </div>
          <p className="font-semibold text-lg mt-3">Total: {breakfastTotal}</p>
        </div>
        <div className="w-full">
          <h2 className="text-xl font-semibold">Lunch</h2>
          <div className="h-72 overflow-y-scroll scrollbar">
            {lun.map((item) => (
              <div className="flex gap-2 py-2  justify-center" key={item.id}>
                <p className="border-r border-black pr-2">{item.name}</p>
                <p className="border-r border-black pr-2">{item.kcals} kcals</p>
                <div
                  className="cursor-pointer"
                  onClick={() => {
                    deleteFood(item.id, "lunch", item.kcals);
                  }}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-red-600"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
              </div>
            ))}
          </div>
          <p className="font-semibold text-lg mt-3">Total: {lunchTotal}</p>
        </div>
        <div className="w-full">
          <h2 className="text-xl font-semibold">Dinner</h2>
          <div className="h-72 overflow-y-scroll scrollbar">
            {din.map((item) => (
              <div className="flex gap-2 py-2 justify-center" key={item.id}>
                <p  className="border-r border-black pr-2">{item.name}</p>
                <p  className="border-r border-black pr-2">{item.kcals} kcals</p>
                <div
                  className="cursor-pointer"
                  onClick={() => {
                    deleteFood(item.id, "dinner", item.kcals);
                  }}
                >
                  {" "}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-red-600"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
              </div>
            ))}
          </div>
          <p className="font-semibold text-lg mt-3">Total: {dinnerTotal}</p>
        </div>
        <div className="w-full">
          <h2 className="text-xl font-semibold">Snacks</h2>
          <div className="h-72 overflow-y-scroll scrollbar">
            {sna.map((item) => (
              <div className="flex gap-2 py-2 justify-center" key={item.id}>
                <p  className="border-r border-black pr-2">{item.name}</p>
                <p  className="border-r border-black pr-2">{item.kcals} kcals</p>
                <div
                  className="cursor-pointer"
                  onClick={() => {
                    deleteFood(item.id, "snacks", item.kcals);
                  }}
                >
                  {" "}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-6 w-6 text-red-600"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth={2}
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                </div>
              </div>
            ))}
           
          </div>
          <p className="font-semibold text-lg mt-3">Total: {snacksTotal}</p>
        </div>
      </main>
      <form
        className=" text-center bg-gray-200 border-t border-black"
        onSubmit={handleSubmit}
      >
        <h2 className="py-5 font-semibold text-lg">Add something</h2>
        <label htmlFor="food" className="font-semibold text-lg">
          Food:{" "}
        </label>

        <input
          className="mb-3 shadow outline-none focus:ring ring-gray-400"
          type="text"
          name="food"
          id="food"
          onChange={(e) => setIngr(e.target.value)}
        />
        <div className="flex justify-center flex-col">
          <div>
            <input
            
              type="radio"
              name="dish"
              id="Breakfast"
              value="breakfast"
              onChange={(e) => {
                setDish(e.target.value);
              }}
            />
            <label htmlFor="breakfast" className="px-1">Breakfast</label>
          </div>
          <div>
            <input
            
              type="radio"
              name="dish"
              id="Lunch"
              value="lunch"
              onChange={(e) => {
                setDish(e.target.value);
              }}
            />
            <label htmlFor="Lunch" className="px-1">Lunch</label>
          </div>
          <div>
            {" "}
            <input
            
              type="radio"
              name="dish"
              id="Dinner"
              value="dinner"
              onChange={(e) => {
                setDish(e.target.value);
              }}
            />
            <label htmlFor="Dinner" className="px-1">Dinner</label>
          </div>
          <div>

            <input
            
              type="radio"
              name="dish"
              id="Snacks"
              value="snacks"
              onChange={(e) => {
                setDish(e.target.value);
              }}
            />
            <label htmlFor="Snacks" className="px-1">Snacks</label>
          </div>
        </div>

        <button type="submit" className="px-4 py-2 my-2  font-bold shadow bg-white focus:shadow-outline hover:bg-green-300 transition-all ease-out">ADD</button>
        {/* <input type="submit" value="SUBMIT" className='shadow bg-yellow-500 hover:bg-yellow-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded cursor-pointer' /> */}

      </form>
    </div>
  );
}
